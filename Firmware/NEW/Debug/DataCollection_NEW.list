
DataCollection_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003164  08003164  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003164  08003164  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003164  08003164  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800316c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08003178  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003178  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000add9  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a28  00000000  00000000  0002ae1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027591  00000000  00000000  0002dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b813  00000000  00000000  00055161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa3f3  00000000  00000000  00060974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ad67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  0015adb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	080030fc 	.word	0x080030fc

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	080030fc 	.word	0x080030fc

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08c      	sub	sp, #48	; 0x30
 8000238:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	HAL_StatusTypeDef i2c;
	const uint8_t MIC184_ADDR = 0x48 << 1;
 800023a:	2390      	movs	r3, #144	; 0x90
 800023c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	const uint8_t MIC184_CMD_REG = 0x01;
 8000240:	2301      	movs	r3, #1
 8000242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	const uint8_t MS5607_ADDR = 0x77 << 1;
 8000246:	23ee      	movs	r3, #238	; 0xee
 8000248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	const uint8_t KX134_ADDR = 0x1E << 1;
 800024c:	233c      	movs	r3, #60	; 0x3c
 800024e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	const uint8_t BNO055_ADDR = 0x28 << 1;
 8000252:	2350      	movs	r3, #80	; 0x50
 8000254:	f887 3020 	strb.w	r3, [r7, #32]

	uint8_t buf[1];
	uint8_t tmpBuf[3];
	uint8_t addr;
	uint8_t validAddr[20];
	uint8_t addrIndex = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 fb2c 	bl	80008ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f88d 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f91d 	bl	80004a4 <MX_GPIO_Init>
  MX_I2C4_Init();
 800026a:	f000 f8db 	bl	8000424 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  //Jank i2c scanner
  buf[0] = 0x00;
 800026e:	2300      	movs	r3, #0
 8000270:	773b      	strb	r3, [r7, #28]
  i2c = HAL_I2C_Master_Transmit(&hi2c4, MIC184_ADDR, buf, 1, HAL_MAX_DELAY);
 8000272:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000276:	b299      	uxth	r1, r3
 8000278:	f107 021c 	add.w	r2, r7, #28
 800027c:	f04f 33ff 	mov.w	r3, #4294967295
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2301      	movs	r3, #1
 8000284:	483d      	ldr	r0, [pc, #244]	; (800037c <main+0x148>)
 8000286:	f000 febf 	bl	8001008 <HAL_I2C_Master_Transmit>
 800028a:	4603      	mov	r3, r0
 800028c:	77fb      	strb	r3, [r7, #31]
  i2c = HAL_I2C_Master_Transmit(&hi2c4, KX134_ADDR, buf, 1, HAL_MAX_DELAY);
 800028e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000292:	b299      	uxth	r1, r3
 8000294:	f107 021c 	add.w	r2, r7, #28
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2301      	movs	r3, #1
 80002a0:	4836      	ldr	r0, [pc, #216]	; (800037c <main+0x148>)
 80002a2:	f000 feb1 	bl	8001008 <HAL_I2C_Master_Transmit>
 80002a6:	4603      	mov	r3, r0
 80002a8:	77fb      	strb	r3, [r7, #31]
  i2c = HAL_I2C_Master_Transmit(&hi2c4, BNO055_ADDR, buf, 1, HAL_MAX_DELAY);
 80002aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80002ae:	b299      	uxth	r1, r3
 80002b0:	f107 021c 	add.w	r2, r7, #28
 80002b4:	f04f 33ff 	mov.w	r3, #4294967295
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2301      	movs	r3, #1
 80002bc:	482f      	ldr	r0, [pc, #188]	; (800037c <main+0x148>)
 80002be:	f000 fea3 	bl	8001008 <HAL_I2C_Master_Transmit>
 80002c2:	4603      	mov	r3, r0
 80002c4:	77fb      	strb	r3, [r7, #31]
  i2c = HAL_I2C_Master_Transmit(&hi2c4, MS5607_ADDR, buf, 1, HAL_MAX_DELAY);
 80002c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80002ca:	b299      	uxth	r1, r3
 80002cc:	f107 021c 	add.w	r2, r7, #28
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2301      	movs	r3, #1
 80002d8:	4828      	ldr	r0, [pc, #160]	; (800037c <main+0x148>)
 80002da:	f000 fe95 	bl	8001008 <HAL_I2C_Master_Transmit>
 80002de:	4603      	mov	r3, r0
 80002e0:	77fb      	strb	r3, [r7, #31]

  //initialize array to 0
  	  for (uint8_t i = 0; i < 20; i++){
 80002e2:	2300      	movs	r3, #0
 80002e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80002e8:	e00b      	b.n	8000302 <main+0xce>
  		  validAddr[i] = 0;
 80002ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80002ee:	3328      	adds	r3, #40	; 0x28
 80002f0:	443b      	add	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	f803 2c24 	strb.w	r2, [r3, #-36]
  	  for (uint8_t i = 0; i < 20; i++){
 80002f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80002fc:	3301      	adds	r3, #1
 80002fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000306:	2b13      	cmp	r3, #19
 8000308:	d9ef      	bls.n	80002ea <main+0xb6>
  	  }

  	  for (uint8_t i = 0; i < 127; i++){
 800030a:	2300      	movs	r3, #0
 800030c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000310:	e02e      	b.n	8000370 <main+0x13c>
  		  buf[0] = 0x00;
 8000312:	2300      	movs	r3, #0
 8000314:	773b      	strb	r3, [r7, #28]
  		  uint8_t x = i << 1;
 8000316:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	77bb      	strb	r3, [r7, #30]
  		  i2c = HAL_I2C_Master_Transmit(&hi2c4, x, buf, 1, HAL_MAX_DELAY);
 800031e:	7fbb      	ldrb	r3, [r7, #30]
 8000320:	b299      	uxth	r1, r3
 8000322:	f107 021c 	add.w	r2, r7, #28
 8000326:	f04f 33ff 	mov.w	r3, #4294967295
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	2301      	movs	r3, #1
 800032e:	4813      	ldr	r0, [pc, #76]	; (800037c <main+0x148>)
 8000330:	f000 fe6a 	bl	8001008 <HAL_I2C_Master_Transmit>
 8000334:	4603      	mov	r3, r0
 8000336:	77fb      	strb	r3, [r7, #31]
  		  HAL_Delay(1);
 8000338:	2001      	movs	r0, #1
 800033a:	f000 fb35 	bl	80009a8 <HAL_Delay>
  		  if ((i2c != HAL_ERROR) && (addrIndex < 20)){
 800033e:	7ffb      	ldrb	r3, [r7, #31]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d010      	beq.n	8000366 <main+0x132>
 8000344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000348:	2b13      	cmp	r3, #19
 800034a:	d80c      	bhi.n	8000366 <main+0x132>
  			  validAddr[addrIndex] = i;
 800034c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000350:	3328      	adds	r3, #40	; 0x28
 8000352:	443b      	add	r3, r7
 8000354:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000358:	f803 2c24 	strb.w	r2, [r3, #-36]
  			  addrIndex++;
 800035c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000360:	3301      	adds	r3, #1
 8000362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  	  for (uint8_t i = 0; i < 127; i++){
 8000366:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800036a:	3301      	adds	r3, #1
 800036c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000370:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000374:	2b7e      	cmp	r3, #126	; 0x7e
 8000376:	d9cc      	bls.n	8000312 <main+0xde>
  		  }
  	  }

  	  while (1){
 8000378:	e7fe      	b.n	8000378 <main+0x144>
 800037a:	bf00      	nop
 800037c:	20000028 	.word	0x20000028

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b098      	sub	sp, #96	; 0x60
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0318 	add.w	r3, r7, #24
 800038a:	2248      	movs	r2, #72	; 0x48
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f002 feac 	bl	80030ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a6:	f001 f93d 	bl	8001624 <HAL_PWREx_ControlVoltageScaling>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003b0:	f000 f8e6 	bl	8000580 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	2302      	movs	r3, #2
 80003c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c6:	2302      	movs	r3, #2
 80003c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003ce:	230c      	movs	r3, #12
 80003d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003d2:	2307      	movs	r3, #7
 80003d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 f9ae 	bl	8001744 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003ee:	f000 f8c7 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	2303      	movs	r3, #3
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2102      	movs	r1, #2
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fe7c 	bl	8002108 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000416:	f000 f8b3 	bl	8000580 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3760      	adds	r7, #96	; 0x60
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_I2C4_Init+0x74>)
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <MX_I2C4_Init+0x78>)
 800042c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_I2C4_Init+0x74>)
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <MX_I2C4_Init+0x7c>)
 8000432:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_I2C4_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_I2C4_Init+0x74>)
 800043c:	2201      	movs	r2, #1
 800043e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_I2C4_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_I2C4_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_I2C4_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_I2C4_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_I2C4_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800045e:	480e      	ldr	r0, [pc, #56]	; (8000498 <MX_I2C4_Init+0x74>)
 8000460:	f000 fd42 	bl	8000ee8 <HAL_I2C_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800046a:	f000 f889 	bl	8000580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800046e:	2100      	movs	r1, #0
 8000470:	4809      	ldr	r0, [pc, #36]	; (8000498 <MX_I2C4_Init+0x74>)
 8000472:	f001 f831 	bl	80014d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800047c:	f000 f880 	bl	8000580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000480:	2100      	movs	r1, #0
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_I2C4_Init+0x74>)
 8000484:	f001 f873 	bl	800156e <HAL_I2CEx_ConfigDigitalFilter>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800048e:	f000 f877 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028
 800049c:	40008400 	.word	0x40008400
 80004a0:	20303e5d 	.word	0x20303e5d

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a2d      	ldr	r2, [pc, #180]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a27      	ldr	r2, [pc, #156]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004d8:	f043 0308 	orr.w	r3, r3, #8
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0308 	and.w	r3, r3, #8
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a21      	ldr	r2, [pc, #132]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_GPIO_Init+0xd0>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_GPIO_Init+0xd0>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <MX_GPIO_Init+0xd0>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_GPIO_Init+0xd0>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000520:	4815      	ldr	r0, [pc, #84]	; (8000578 <MX_GPIO_Init+0xd4>)
 8000522:	f000 fcc9 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2101      	movs	r1, #1
 800052a:	4814      	ldr	r0, [pc, #80]	; (800057c <MX_GPIO_Init+0xd8>)
 800052c:	f000 fcc4 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000530:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <MX_GPIO_Init+0xd4>)
 800054a:	f000 fb35 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054e:	2301      	movs	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_GPIO_Init+0xd8>)
 8000566:	f000 fb27 	bl	8000bb8 <HAL_GPIO_Init>

}
 800056a:	bf00      	nop
 800056c:	3728      	adds	r7, #40	; 0x28
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000
 8000578:	42020800 	.word	0x42020800
 800057c:	42020c00 	.word	0x42020c00

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_MspInit+0x44>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6613      	str	r3, [r2, #96]	; 0x60
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x44>)
 80005a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_MspInit+0x44>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b4:	6593      	str	r3, [r2, #88]	; 0x58
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_MspInit+0x44>)
 80005b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005c2:	f001 f88b 	bl	80016dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0ae      	sub	sp, #184	; 0xb8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2294      	movs	r2, #148	; 0x94
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fd79 	bl	80030ec <memset>
  if(hi2c->Instance==I2C4)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a22      	ldr	r2, [pc, #136]	; (8000688 <HAL_I2C_MspInit+0xb4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d13c      	bne.n	800067e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000604:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000608:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800060a:	2300      	movs	r3, #0
 800060c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f830 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800061e:	f7ff ffaf 	bl	8000580 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <HAL_I2C_MspInit+0xb8>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a19      	ldr	r2, [pc, #100]	; (800068c <HAL_I2C_MspInit+0xb8>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_I2C_MspInit+0xb8>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800063a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800063e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000642:	2312      	movs	r3, #18
 8000644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000654:	2304      	movs	r3, #4
 8000656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800065a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800065e:	4619      	mov	r1, r3
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <HAL_I2C_MspInit+0xbc>)
 8000662:	f000 faa9 	bl	8000bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_I2C_MspInit+0xb8>)
 8000668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <HAL_I2C_MspInit+0xb8>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_I2C_MspInit+0xb8>)
 8000674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800067e:	bf00      	nop
 8000680:	37b8      	adds	r7, #184	; 0xb8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40008400 	.word	0x40008400
 800068c:	40021000 	.word	0x40021000
 8000690:	42020c00 	.word	0x42020c00

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f942 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000712:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <SystemCoreClockUpdate+0x144>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d107      	bne.n	800072e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800071e:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <SystemCoreClockUpdate+0x144>)
 8000720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	e005      	b.n	800073a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <SystemCoreClockUpdate+0x144>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	091b      	lsrs	r3, r3, #4
 8000734:	f003 030f 	and.w	r3, r3, #15
 8000738:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800073a:	4a46      	ldr	r2, [pc, #280]	; (8000854 <SystemCoreClockUpdate+0x148>)
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000744:	4b42      	ldr	r3, [pc, #264]	; (8000850 <SystemCoreClockUpdate+0x144>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f003 030c 	and.w	r3, r3, #12
 800074c:	2b0c      	cmp	r3, #12
 800074e:	d866      	bhi.n	800081e <SystemCoreClockUpdate+0x112>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <SystemCoreClockUpdate+0x4c>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	0800078d 	.word	0x0800078d
 800075c:	0800081f 	.word	0x0800081f
 8000760:	0800081f 	.word	0x0800081f
 8000764:	0800081f 	.word	0x0800081f
 8000768:	08000795 	.word	0x08000795
 800076c:	0800081f 	.word	0x0800081f
 8000770:	0800081f 	.word	0x0800081f
 8000774:	0800081f 	.word	0x0800081f
 8000778:	0800079d 	.word	0x0800079d
 800077c:	0800081f 	.word	0x0800081f
 8000780:	0800081f 	.word	0x0800081f
 8000784:	0800081f 	.word	0x0800081f
 8000788:	080007a5 	.word	0x080007a5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800078c:	4a32      	ldr	r2, [pc, #200]	; (8000858 <SystemCoreClockUpdate+0x14c>)
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	6013      	str	r3, [r2, #0]
      break;
 8000792:	e048      	b.n	8000826 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <SystemCoreClockUpdate+0x14c>)
 8000796:	4a31      	ldr	r2, [pc, #196]	; (800085c <SystemCoreClockUpdate+0x150>)
 8000798:	601a      	str	r2, [r3, #0]
      break;
 800079a:	e044      	b.n	8000826 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800079c:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <SystemCoreClockUpdate+0x14c>)
 800079e:	4a30      	ldr	r2, [pc, #192]	; (8000860 <SystemCoreClockUpdate+0x154>)
 80007a0:	601a      	str	r2, [r3, #0]
      break;
 80007a2:	e040      	b.n	8000826 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <SystemCoreClockUpdate+0x144>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	f003 0303 	and.w	r3, r3, #3
 80007ac:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemCoreClockUpdate+0x144>)
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	091b      	lsrs	r3, r3, #4
 80007b4:	f003 030f 	and.w	r3, r3, #15
 80007b8:	3301      	adds	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d003      	beq.n	80007ca <SystemCoreClockUpdate+0xbe>
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d006      	beq.n	80007d6 <SystemCoreClockUpdate+0xca>
 80007c8:	e00b      	b.n	80007e2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <SystemCoreClockUpdate+0x150>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	613b      	str	r3, [r7, #16]
          break;
 80007d4:	e00b      	b.n	80007ee <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80007d6:	4a22      	ldr	r2, [pc, #136]	; (8000860 <SystemCoreClockUpdate+0x154>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	613b      	str	r3, [r7, #16]
          break;
 80007e0:	e005      	b.n	80007ee <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	613b      	str	r3, [r7, #16]
          break;
 80007ec:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <SystemCoreClockUpdate+0x144>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <SystemCoreClockUpdate+0x144>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0e5b      	lsrs	r3, r3, #25
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	3301      	adds	r3, #1
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	fbb2 f3f3 	udiv	r3, r2, r3
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <SystemCoreClockUpdate+0x14c>)
 800081a:	6013      	str	r3, [r2, #0]
      break;
 800081c:	e003      	b.n	8000826 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <SystemCoreClockUpdate+0x14c>)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	6013      	str	r3, [r2, #0]
      break;
 8000824:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <SystemCoreClockUpdate+0x144>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <SystemCoreClockUpdate+0x158>)
 8000832:	5cd3      	ldrb	r3, [r2, r3]
 8000834:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <SystemCoreClockUpdate+0x14c>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	fa22 f303 	lsr.w	r3, r2, r3
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <SystemCoreClockUpdate+0x14c>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	371c      	adds	r7, #28
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000
 8000854:	08003124 	.word	0x08003124
 8000858:	20000000 	.word	0x20000000
 800085c:	00f42400 	.word	0x00f42400
 8000860:	01e84800 	.word	0x01e84800
 8000864:	08003114 	.word	0x08003114

08000868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f7ff ff3c 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000870:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000872:	e003      	b.n	800087c <LoopCopyDataInit>

08000874 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000876:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000878:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800087a:	3104      	adds	r1, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8000880:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000882:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000884:	d3f6      	bcc.n	8000874 <CopyDataInit>
	ldr	r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000888:	e002      	b.n	8000890 <LoopFillZerobss>

0800088a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800088a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800088c:	f842 3b04 	str.w	r3, [r2], #4

08000890 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LoopForever+0x16>)
	cmp	r2, r3
 8000892:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000894:	d3f9      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000896:	f002 fc05 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800089a:	f7ff fccb 	bl	8000234 <main>

0800089e <LoopForever>:

LoopForever:
    b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80008a0:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80008a4:	0800316c 	.word	0x0800316c
	ldr	r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008ac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80008b4:	20000078 	.word	0x20000078

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>

080008ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008c4:	2004      	movs	r0, #4
 80008c6:	f000 f945 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80008ca:	f7ff ff1f 	bl	800070c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ce:	2007      	movs	r0, #7
 80008d0:	f000 f80e 	bl	80008f0 <HAL_InitTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	e001      	b.n	80008e4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008e0:	f7ff fe54 	bl	800058c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_InitTick+0x6c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d023      	beq.n	800094c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_InitTick+0x70>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_InitTick+0x6c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f93f 	bl	8000b9e <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10f      	bne.n	8000946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b07      	cmp	r3, #7
 800092a:	d809      	bhi.n	8000940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f919 	bl	8000b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_InitTick+0x74>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e007      	b.n	8000950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e004      	b.n	8000950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]
 800094a:	e001      	b.n	8000950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000950:	7bfb      	ldrb	r3, [r7, #15]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008
 8000960:	20000000 	.word	0x20000000
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	20000074 	.word	0x20000074

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000074 	.word	0x20000074

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff ffee 	bl	8000990 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffde 	bl	8000990 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0152      	lsls	r2, r2, #5
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0152      	lsls	r2, r2, #5
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	bf28      	it	cs
 8000ac6:	2303      	movcs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3303      	adds	r3, #3
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b04      	subs	r3, #4
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	2107      	movs	r1, #7
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff47 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff5e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff90 	bl	8000aa8 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5f 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffb2 	bl	8000b10 <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bc6:	e158      	b.n	8000e7a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 814a 	beq.w	8000e74 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d00b      	beq.n	8000c00 <HAL_GPIO_Init+0x48>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d007      	beq.n	8000c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf4:	2b11      	cmp	r3, #17
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b12      	cmp	r3, #18
 8000bfe:	d130      	bne.n	8000c62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c36:	2201      	movs	r2, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	f003 0201 	and.w	r2, r3, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0xea>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b12      	cmp	r3, #18
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	6939      	ldr	r1, [r7, #16]
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0203 	and.w	r2, r3, #3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 80a4 	beq.w	8000e74 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000d2c:	4a5a      	ldr	r2, [pc, #360]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3318      	adds	r3, #24
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a52      	ldr	r2, [pc, #328]	; (8000e9c <HAL_GPIO_Init+0x2e4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d025      	beq.n	8000da4 <HAL_GPIO_Init+0x1ec>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a51      	ldr	r2, [pc, #324]	; (8000ea0 <HAL_GPIO_Init+0x2e8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d01f      	beq.n	8000da0 <HAL_GPIO_Init+0x1e8>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a50      	ldr	r2, [pc, #320]	; (8000ea4 <HAL_GPIO_Init+0x2ec>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d019      	beq.n	8000d9c <HAL_GPIO_Init+0x1e4>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d013      	beq.n	8000d98 <HAL_GPIO_Init+0x1e0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4e      	ldr	r2, [pc, #312]	; (8000eac <HAL_GPIO_Init+0x2f4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00d      	beq.n	8000d94 <HAL_GPIO_Init+0x1dc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4d      	ldr	r2, [pc, #308]	; (8000eb0 <HAL_GPIO_Init+0x2f8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0x1d8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <HAL_GPIO_Init+0x2fc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d101      	bne.n	8000d8c <HAL_GPIO_Init+0x1d4>
 8000d88:	2306      	movs	r3, #6
 8000d8a:	e00c      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	e00a      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e008      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da4:	2300      	movs	r3, #0
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	00d2      	lsls	r2, r2, #3
 8000dae:	4093      	lsls	r3, r2
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000db6:	4938      	ldr	r1, [pc, #224]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3318      	adds	r3, #24
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dc4:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dea:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f47f ae9f 	bne.w	8000bc8 <HAL_GPIO_Init+0x10>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	4002f400 	.word	0x4002f400
 8000e9c:	42020000 	.word	0x42020000
 8000ea0:	42020400 	.word	0x42020400
 8000ea4:	42020800 	.word	0x42020800
 8000ea8:	42020c00 	.word	0x42020c00
 8000eac:	42021000 	.word	0x42021000
 8000eb0:	42021400 	.word	0x42021400
 8000eb4:	42021800 	.word	0x42021800

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e081      	b.n	8000ffe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fb60 	bl	80005d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2224      	movs	r2, #36	; 0x24
 8000f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d107      	bne.n	8000f62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	e006      	b.n	8000f70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d104      	bne.n	8000f82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	ea42 0103 	orr.w	r1, r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	021a      	lsls	r2, r3, #8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69d9      	ldr	r1, [r3, #28]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1a      	ldr	r2, [r3, #32]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2220      	movs	r2, #32
 8000fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af02      	add	r7, sp, #8
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	461a      	mov	r2, r3
 8001014:	460b      	mov	r3, r1
 8001016:	817b      	strh	r3, [r7, #10]
 8001018:	4613      	mov	r3, r2
 800101a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b20      	cmp	r3, #32
 8001026:	f040 80da 	bne.w	80011de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_I2C_Master_Transmit+0x30>
 8001034:	2302      	movs	r3, #2
 8001036:	e0d3      	b.n	80011e0 <HAL_I2C_Master_Transmit+0x1d8>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001040:	f7ff fca6 	bl	8000990 <HAL_GetTick>
 8001044:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2319      	movs	r3, #25
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f8f0 	bl	8001238 <I2C_WaitOnFlagUntilTimeout>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0be      	b.n	80011e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2221      	movs	r2, #33	; 0x21
 8001066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2210      	movs	r2, #16
 800106e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	893a      	ldrh	r2, [r7, #8]
 8001082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800108e:	b29b      	uxth	r3, r3
 8001090:	2bff      	cmp	r3, #255	; 0xff
 8001092:	d90e      	bls.n	80010b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	8979      	ldrh	r1, [r7, #10]
 80010a2:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 f9e6 	bl	800147c <I2C_TransferConfig>
 80010b0:	e06c      	b.n	800118c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	8979      	ldrh	r1, [r7, #10]
 80010c4:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f9d5 	bl	800147c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010d2:	e05b      	b.n	800118c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	6a39      	ldr	r1, [r7, #32]
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f000 f8ed 	bl	80012b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e07b      	b.n	80011e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001102:	b29b      	uxth	r3, r3
 8001104:	3b01      	subs	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001110:	3b01      	subs	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800111c:	b29b      	uxth	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d034      	beq.n	800118c <HAL_I2C_Master_Transmit+0x184>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001126:	2b00      	cmp	r3, #0
 8001128:	d130      	bne.n	800118c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	2200      	movs	r2, #0
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f87f 	bl	8001238 <I2C_WaitOnFlagUntilTimeout>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e04d      	b.n	80011e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001148:	b29b      	uxth	r3, r3
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d90e      	bls.n	800116c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	22ff      	movs	r2, #255	; 0xff
 8001152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001158:	b2da      	uxtb	r2, r3
 800115a:	8979      	ldrh	r1, [r7, #10]
 800115c:	2300      	movs	r3, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f989 	bl	800147c <I2C_TransferConfig>
 800116a:	e00f      	b.n	800118c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001170:	b29a      	uxth	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117a:	b2da      	uxtb	r2, r3
 800117c:	8979      	ldrh	r1, [r7, #10]
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f978 	bl	800147c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d19e      	bne.n	80010d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f8cc 	bl	8001338 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e01a      	b.n	80011e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2220      	movs	r2, #32
 80011b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_I2C_Master_Transmit+0x1e4>)
 80011be:	400b      	ands	r3, r1
 80011c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2220      	movs	r2, #32
 80011c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80011de:	2302      	movs	r3, #2
  }
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	80002000 	.word	0x80002000
 80011ec:	fe00e800 	.word	0xfe00e800

080011f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b02      	cmp	r3, #2
 8001204:	d103      	bne.n	800120e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d007      	beq.n	800122c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	619a      	str	r2, [r3, #24]
  }
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4613      	mov	r3, r2
 8001246:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001248:	e022      	b.n	8001290 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d01e      	beq.n	8001290 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001252:	f7ff fb9d 	bl	8000990 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d302      	bcc.n	8001268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d113      	bne.n	8001290 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f043 0220 	orr.w	r2, r3, #32
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2220      	movs	r2, #32
 8001278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e00f      	b.n	80012b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4013      	ands	r3, r2
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	429a      	cmp	r2, r3
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d0cd      	beq.n	800124a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012c4:	e02c      	b.n	8001320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f870 	bl	80013b0 <I2C_IsAcknowledgeFailed>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e02a      	b.n	8001330 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d01e      	beq.n	8001320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e2:	f7ff fb55 	bl	8000990 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d302      	bcc.n	80012f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d113      	bne.n	8001320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f043 0220 	orr.w	r2, r3, #32
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2220      	movs	r2, #32
 8001308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e007      	b.n	8001330 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b02      	cmp	r3, #2
 800132c:	d1cb      	bne.n	80012c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001344:	e028      	b.n	8001398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f830 	bl	80013b0 <I2C_IsAcknowledgeFailed>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e026      	b.n	80013a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800135a:	f7ff fb19 	bl	8000990 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	429a      	cmp	r2, r3
 8001368:	d302      	bcc.n	8001370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d113      	bne.n	8001398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f043 0220 	orr.w	r2, r3, #32
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2220      	movs	r2, #32
 8001380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e007      	b.n	80013a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d1cf      	bne.n	8001346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b10      	cmp	r3, #16
 80013c8:	d151      	bne.n	800146e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ca:	e022      	b.n	8001412 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d2:	d01e      	beq.n	8001412 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d4:	f7ff fadc 	bl	8000990 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d302      	bcc.n	80013ea <I2C_IsAcknowledgeFailed+0x3a>
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d113      	bne.n	8001412 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f043 0220 	orr.w	r2, r3, #32
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e02e      	b.n	8001470 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b20      	cmp	r3, #32
 800141e:	d1d5      	bne.n	80013cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2210      	movs	r2, #16
 8001426:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2220      	movs	r2, #32
 800142e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff fedd 	bl	80011f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <I2C_IsAcknowledgeFailed+0xc8>)
 8001442:	400b      	ands	r3, r1
 8001444:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f043 0204 	orr.w	r2, r3, #4
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2220      	movs	r2, #32
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	fe00e800 	.word	0xfe00e800

0800147c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	817b      	strh	r3, [r7, #10]
 800148a:	4613      	mov	r3, r2
 800148c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <I2C_TransferConfig+0x58>)
 800149e:	430b      	orrs	r3, r1
 80014a0:	43db      	mvns	r3, r3
 80014a2:	ea02 0103 	and.w	r1, r2, r3
 80014a6:	897b      	ldrh	r3, [r7, #10]
 80014a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014ac:	7a7b      	ldrb	r3, [r7, #9]
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	431a      	orrs	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	03ff63ff 	.word	0x03ff63ff

080014d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d138      	bne.n	8001560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e032      	b.n	8001562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800152a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001560:	2302      	movs	r3, #2
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b20      	cmp	r3, #32
 8001582:	d139      	bne.n	80015f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800158e:	2302      	movs	r3, #2
 8001590:	e033      	b.n	80015fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2224      	movs	r2, #36	; 0x24
 800159e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e000      	b.n	80015fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015f8:	2302      	movs	r3, #2
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_PWREx_GetVoltageRange+0x18>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40007000 	.word	0x40007000

08001624 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001634:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001636:	f000 f861 	bl	80016fc <HAL_PWREx_SMPS_GetEffectiveMode>
 800163a:	4603      	mov	r3, r0
 800163c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001640:	d101      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e03e      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800164e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001652:	d101      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e035      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d101      	bne.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	e02f      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800166c:	4917      	ldr	r1, [pc, #92]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	09db      	lsrs	r3, r3, #7
 8001682:	2232      	movs	r2, #50	; 0x32
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	3301      	adds	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001694:	e002      	b.n	800169c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3b01      	subs	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a8:	d102      	bne.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f2      	bne.n	8001696 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016bc:	d101      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e000      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40007000 	.word	0x40007000
 80016d0:	20000000 	.word	0x20000000
 80016d4:	0a7c5ac5 	.word	0x0a7c5ac5
 80016d8:	cccccccd 	.word	0xcccccccd

080016dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ea:	6093      	str	r3, [r2, #8]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40007000 	.word	0x40007000

080016fc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	e00a      	b.n	8001730 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	e001      	b.n	8001730 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000

08001744 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f000 bcd0 	b.w	80020f8 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001758:	4b99      	ldr	r3, [pc, #612]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001762:	4b97      	ldr	r3, [pc, #604]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80e9 	beq.w	800194c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_RCC_OscConfig+0x4a>
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	f040 8083 	bne.w	800188e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d17f      	bne.n	800188e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800178e:	4b8c      	ldr	r3, [pc, #560]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_RCC_OscConfig+0x64>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f000 bca8 	b.w	80020f8 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ac:	4b84      	ldr	r3, [pc, #528]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_RCC_OscConfig+0x7e>
 80017b8:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c0:	e005      	b.n	80017ce <HAL_RCC_OscConfig+0x8a>
 80017c2:	4b7f      	ldr	r3, [pc, #508]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d224      	bcs.n	800181c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fe70 	bl	80024bc <RCC_SetFlashLatencyFromMSIRange>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f000 bc88 	b.w	80020f8 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e8:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a74      	ldr	r2, [pc, #464]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	496f      	ldr	r1, [pc, #444]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001806:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	496a      	ldr	r1, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
 800181a:	e026      	b.n	800186a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a67      	ldr	r2, [pc, #412]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	4962      	ldr	r1, [pc, #392]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183a:	4b61      	ldr	r3, [pc, #388]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	495d      	ldr	r1, [pc, #372]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fe2f 	bl	80024bc <RCC_SetFlashLatencyFromMSIRange>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f000 bc47 	b.w	80020f8 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800186a:	f000 fe13 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 800186e:	4603      	mov	r3, r0
 8001870:	4a54      	ldr	r2, [pc, #336]	; (80019c4 <HAL_RCC_OscConfig+0x280>)
 8001872:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_RCC_OscConfig+0x284>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f839 	bl	80008f0 <HAL_InitTick>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d060      	beq.n	800194a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	f000 bc35 	b.w	80020f8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d039      	beq.n	800190a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f875 	bl	8000990 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a8:	e00f      	b.n	80018ca <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018aa:	f7ff f871 	bl	8000990 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d908      	bls.n	80018ca <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b8:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f000 bc17 	b.w	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0e9      	beq.n	80018aa <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a39      	ldr	r2, [pc, #228]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	4934      	ldr	r1, [pc, #208]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	492f      	ldr	r1, [pc, #188]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
 8001908:	e020      	b.n	800194c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001916:	f7ff f83b 	bl	8000990 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191c:	e00e      	b.n	800193c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191e:	f7ff f837 	bl	8000990 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d907      	bls.n	800193c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e3dd      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ea      	bne.n	800191e <HAL_RCC_OscConfig+0x1da>
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d07e      	beq.n	8001a56 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b08      	cmp	r3, #8
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x226>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b0c      	cmp	r3, #12
 8001962:	d10e      	bne.n	8001982 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d10b      	bne.n	8001982 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06e      	beq.n	8001a54 <HAL_RCC_OscConfig+0x310>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d16a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e3ba      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x256>
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e024      	b.n	80019e4 <HAL_RCC_OscConfig+0x2a0>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a2:	d113      	bne.n	80019cc <HAL_RCC_OscConfig+0x288>
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80019aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a02      	ldr	r2, [pc, #8]	; (80019c0 <HAL_RCC_OscConfig+0x27c>)
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	e012      	b.n	80019e4 <HAL_RCC_OscConfig+0x2a0>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004
 80019cc:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a87      	ldr	r2, [pc, #540]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d019      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7fe ffd0 	bl	8000990 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	e00e      	b.n	8001a12 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7fe ffcc 	bl	8000990 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d907      	bls.n	8001a12 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	4b7e      	ldr	r3, [pc, #504]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e372      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	4b7a      	ldr	r3, [pc, #488]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0ea      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2b0>
 8001a1e:	e01a      	b.n	8001a56 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7fe ffb6 	bl	8000990 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a26:	e00e      	b.n	8001a46 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7fe ffb2 	bl	8000990 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d907      	bls.n	8001a46 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a36:	4b71      	ldr	r3, [pc, #452]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e358      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ea      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2e4>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d06c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x330>
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d119      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d116      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_OscConfig+0x348>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e335      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	4958      	ldr	r1, [pc, #352]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa0:	e04c      	b.n	8001b3c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d029      	beq.n	8001afe <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a53      	ldr	r2, [pc, #332]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7fe ff6b 	bl	8000990 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	e00e      	b.n	8001adc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7fe ff67 	bl	8000990 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d907      	bls.n	8001adc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e30d      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ea      	beq.n	8001abe <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	4941      	ldr	r1, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e01e      	b.n	8001b3c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a3e      	ldr	r2, [pc, #248]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7fe ff41 	bl	8000990 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	e00e      	b.n	8001b30 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7fe ff3d 	bl	8000990 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b20:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e2e3      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ea      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d062      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d038      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d108      	bne.n	8001b6a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b60:	f023 0310 	bic.w	r3, r3, #16
 8001b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b68:	e007      	b.n	8001b7a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b80:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7fe ff01 	bl	8000990 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b90:	e00f      	b.n	8001bb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7fe fefd 	bl	8000990 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d908      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e2a2      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0e8      	beq.n	8001b92 <HAL_RCC_OscConfig+0x44e>
 8001bc0:	e025      	b.n	8001c0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7fe fedd 	bl	8000990 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd8:	e012      	b.n	8001c00 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7fe fed9 	bl	8000990 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d90b      	bls.n	8001c00 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e27e      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c00:	4ba8      	ldr	r3, [pc, #672]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e5      	bne.n	8001bda <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 812d 	beq.w	8001e76 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c20:	4ba0      	ldr	r3, [pc, #640]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	4a9c      	ldr	r2, [pc, #624]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6593      	str	r3, [r2, #88]	; 0x58
 8001c38:	4b9a      	ldr	r3, [pc, #616]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c48:	4b97      	ldr	r3, [pc, #604]	; (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11e      	bne.n	8001c92 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a93      	ldr	r2, [pc, #588]	; (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c60:	f7fe fe96 	bl	8000990 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c66:	e00e      	b.n	8001c86 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c68:	f7fe fe92 	bl	8000990 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d907      	bls.n	8001c86 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c76:	4b8c      	ldr	r3, [pc, #560]	; (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e238      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c86:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ea      	beq.n	8001c68 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01f      	beq.n	8001cde <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001caa:	4b7e      	ldr	r3, [pc, #504]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a7c      	ldr	r2, [pc, #496]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cba:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	4a78      	ldr	r2, [pc, #480]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cca:	e018      	b.n	8001cfe <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ccc:	4b75      	ldr	r3, [pc, #468]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	4a74      	ldr	r2, [pc, #464]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cdc:	e00f      	b.n	8001cfe <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cde:	4b71      	ldr	r3, [pc, #452]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	4a6f      	ldr	r2, [pc, #444]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cee:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf4:	4a6b      	ldr	r2, [pc, #428]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001cf6:	f023 0304 	bic.w	r3, r3, #4
 8001cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d068      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d06:	f7fe fe43 	bl	8000990 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0c:	e011      	b.n	8001d32 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7fe fe3f 	bl	8000990 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d908      	bls.n	8001d32 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d20:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e1e2      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0e6      	beq.n	8001d0e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d022      	beq.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d4c:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	4a54      	ldr	r2, [pc, #336]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d5c:	e011      	b.n	8001d82 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe fe17 	bl	8000990 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d908      	bls.n	8001d82 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1ba      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d82:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0e6      	beq.n	8001d5e <HAL_RCC_OscConfig+0x61a>
 8001d90:	e068      	b.n	8001e64 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d92:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	4a42      	ldr	r2, [pc, #264]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001da2:	e011      	b.n	8001dc8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7fe fdf4 	bl	8000990 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d908      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e197      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e6      	bne.n	8001da4 <HAL_RCC_OscConfig+0x660>
 8001dd6:	e045      	b.n	8001e64 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fdda 	bl	8000990 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dde:	e011      	b.n	8001e04 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7fe fdd6 	bl	8000990 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d908      	bls.n	8001e04 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e179      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e6      	bne.n	8001de0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d021      	beq.n	8001e64 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e20:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e30:	e011      	b.n	8001e56 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fdad 	bl	8000990 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d908      	bls.n	8001e56 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e150      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e6      	bne.n	8001e32 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d04f      	beq.n	8001f22 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d028      	beq.n	8001edc <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_RCC_OscConfig+0x760>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fd79 	bl	8000990 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x788>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eac:	f7fe fd70 	bl	8000990 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d908      	bls.n	8001ecc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eba:	4b91      	ldr	r3, [pc, #580]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e115      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0e8      	beq.n	8001eac <HAL_RCC_OscConfig+0x768>
 8001eda:	e022      	b.n	8001f22 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001edc:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee2:	4a87      	ldr	r2, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7fe fd50 	bl	8000990 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ef2:	e00f      	b.n	8001f14 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef4:	f7fe fd4c 	bl	8000990 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d908      	bls.n	8001f14 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f02:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0f1      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f14:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1e8      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80e5 	beq.w	80020f6 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f2c:	4b74      	ldr	r3, [pc, #464]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	f000 809f 	beq.w	8002078 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d166      	bne.n	8002010 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7fe fd1f 	bl	8000990 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	e00e      	b.n	8001f74 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7fe fd1b 	bl	8000990 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d907      	bls.n	8001f74 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f64:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0c1      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ea      	bne.n	8001f56 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_OscConfig+0x9c0>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f90:	3a01      	subs	r2, #1
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	4311      	orrs	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f9a:	0212      	lsls	r2, r2, #8
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fa2:	0852      	lsrs	r2, r2, #1
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	0552      	lsls	r2, r2, #21
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fae:	0852      	lsrs	r2, r2, #1
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	0652      	lsls	r2, r2, #25
 8001fb4:	4311      	orrs	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fba:	06d2      	lsls	r2, r2, #27
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	4950      	ldr	r1, [pc, #320]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a4d      	ldr	r2, [pc, #308]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fcd8 	bl	8000990 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	e00e      	b.n	8002002 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe fcd4 	bl	8000990 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d907      	bls.n	8002002 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e07a      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0ea      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x8a0>
 800200e:	e072      	b.n	80020f6 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3a      	ldr	r2, [pc, #232]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800201c:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a31      	ldr	r2, [pc, #196]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 800203a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fca4 	bl	8000990 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204a:	e00e      	b.n	800206a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe fca0 	bl	8000990 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d907      	bls.n	800206a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e046      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ea      	bne.n	800204c <HAL_RCC_OscConfig+0x908>
 8002076:	e03e      	b.n	80020f6 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e039      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_OscConfig+0x9bc>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	429a      	cmp	r2, r3
 8002096:	d12c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	3b01      	subs	r3, #1
 80020a4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d123      	bne.n	80020f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d11b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d113      	bne.n	80020f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	3b01      	subs	r3, #1
 80020d8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	3b01      	subs	r3, #1
 80020ec:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	019f800c 	.word	0x019f800c

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e10d      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 020f 	bic.w	r2, r3, #15
 8002136:	4983      	ldr	r1, [pc, #524]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0f5      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8094 	beq.w	8002286 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d134      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b78      	ldr	r3, [pc, #480]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0e2      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002176:	f000 fa05 	bl	8002584 <RCC_GetSysClockFreqFromPLLSource>
 800217a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4a73      	ldr	r2, [pc, #460]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d956      	bls.n	8002232 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002184:	4b70      	ldr	r3, [pc, #448]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002190:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002198:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 800219a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e045      	b.n	8002232 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d03f      	beq.n	8002232 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d13b      	bne.n	8002232 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	4a61      	ldr	r2, [pc, #388]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e030      	b.n	8002232 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d8:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d115      	bne.n	8002210 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0a9      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f0:	4b55      	ldr	r3, [pc, #340]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e09d      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e095      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002210:	f000 f8a2 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002214:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d909      	bls.n	8002232 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002226:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002232:	4b45      	ldr	r3, [pc, #276]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4942      	ldr	r1, [pc, #264]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002244:	f7fe fba4 	bl	8000990 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	e013      	b.n	8002274 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7fe fba0 	bl	8000990 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d90a      	bls.n	8002274 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e063      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002274:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 020c 	and.w	r2, r3, #12
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	429a      	cmp	r2, r3
 8002284:	d1e2      	bne.n	800224c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	492a      	ldr	r1, [pc, #168]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d105      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80022b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b6:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d210      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 020f 	bic.w	r2, r3, #15
 80022ce:	491d      	ldr	r1, [pc, #116]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_ClockConfig+0x23c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e029      	b.n	800233c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4911      	ldr	r1, [pc, #68]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002326:	f000 f8b5 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 800232a:	4603      	mov	r3, r0
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_RCC_ClockConfig+0x248>)
 800232e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HAL_RCC_ClockConfig+0x24c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fadb 	bl	80008f0 <HAL_InitTick>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	04c4b400 	.word	0x04c4b400
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002370:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d121      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d11e      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800238c:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002398:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 800239a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80023b4:	4a34      	ldr	r2, [pc, #208]	; (8002488 <HAL_RCC_GetSysClockFreq+0x130>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023bc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023d0:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCC_GetSysClockFreq+0x134>)
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e004      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023dc:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCC_GetSysClockFreq+0x138>)
 80023de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d146      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3301      	adds	r3, #1
 80023fc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d003      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0xb4>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d00d      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0xce>
 800240a:	e019      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800240c:	4a1f      	ldr	r2, [pc, #124]	; (800248c <HAL_RCC_GetSysClockFreq+0x134>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002416:	68d2      	ldr	r2, [r2, #12]
 8002418:	0a12      	lsrs	r2, r2, #8
 800241a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
        break;
 8002424:	e019      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_RCC_GetSysClockFreq+0x138>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4a15      	ldr	r2, [pc, #84]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	0a12      	lsrs	r2, r2, #8
 8002434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
        break;
 800243e:	e00c      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 800244a:	68d2      	ldr	r2, [r2, #12]
 800244c:	0a12      	lsrs	r2, r2, #8
 800244e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
        break;
 8002458:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_RCC_GetSysClockFreq+0x12c>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	0e5b      	lsrs	r3, r3, #25
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	3301      	adds	r3, #1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002474:	69bb      	ldr	r3, [r7, #24]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	08003124 	.word	0x08003124
 800248c:	00f42400 	.word	0x00f42400
 8002490:	01e84800 	.word	0x01e84800

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002498:	f7ff ff5e 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetHCLKFreq+0x20>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08003114 	.word	0x08003114

080024bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024d4:	f7ff f898 	bl	8001608 <HAL_PWREx_GetVoltageRange>
 80024d8:	6138      	str	r0, [r7, #16]
 80024da:	e014      	b.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	4a26      	ldr	r2, [pc, #152]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024f4:	f7ff f888 	bl	8001608 <HAL_PWREx_GetVoltageRange>
 80024f8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a1f      	ldr	r2, [pc, #124]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	d10b      	bne.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	d919      	bls.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2ba0      	cmp	r3, #160	; 0xa0
 800251e:	d902      	bls.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002520:	2302      	movs	r3, #2
 8002522:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002524:	e013      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002526:	2301      	movs	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800252a:	e010      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d902      	bls.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002532:	2303      	movs	r3, #3
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e00a      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	d102      	bne.n	8002544 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800253e:	2302      	movs	r3, #2
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e004      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b70      	cmp	r3, #112	; 0x70
 8002548:	d101      	bne.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 020f 	bic.w	r2, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40022000 	.word	0x40022000

08002584 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d118      	bne.n	80025cc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e005      	b.n	80025c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025b6:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80025c2:	4a2a      	ldr	r2, [pc, #168]	; (800266c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	3301      	adds	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d003      	beq.n	80025f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d00d      	beq.n	800260c <RCC_GetSysClockFreqFromPLLSource+0x88>
 80025f0:	e019      	b.n	8002626 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f2:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	0a12      	lsrs	r2, r2, #8
 8002600:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	613b      	str	r3, [r7, #16]
      break;
 800260a:	e019      	b.n	8002640 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002616:	68d2      	ldr	r2, [r2, #12]
 8002618:	0a12      	lsrs	r2, r2, #8
 800261a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	613b      	str	r3, [r7, #16]
      break;
 8002624:	e00c      	b.n	8002640 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002630:	68d2      	ldr	r2, [r2, #12]
 8002632:	0a12      	lsrs	r2, r2, #8
 8002634:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	613b      	str	r3, [r7, #16]
      break;
 800263e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0e5b      	lsrs	r3, r3, #25
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800265a:	683b      	ldr	r3, [r7, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000
 800266c:	08003124 	.word	0x08003124
 8002670:	00f42400 	.word	0x00f42400
 8002674:	01e84800 	.word	0x01e84800

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002680:	2300      	movs	r3, #0
 8002682:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002684:	2300      	movs	r3, #0
 8002686:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d040      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	d02a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d825      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026a0:	2b60      	cmp	r3, #96	; 0x60
 80026a2:	d026      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026a4:	2b60      	cmp	r3, #96	; 0x60
 80026a6:	d821      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d006      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d81d      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d010      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80026b8:	e018      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026ba:	4b8f      	ldr	r3, [pc, #572]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a8e      	ldr	r2, [pc, #568]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80026c6:	e015      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3304      	adds	r3, #4
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fb56 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80026d8:	e00c      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3320      	adds	r3, #32
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fc33 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80026ea:	e003      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	77fb      	strb	r3, [r7, #31]
        break;
 80026f0:	e000      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80026f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026f4:	7ffb      	ldrb	r3, [r7, #31]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10b      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026fa:	4b7f      	ldr	r3, [pc, #508]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002700:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002708:	497b      	ldr	r1, [pc, #492]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002710:	e001      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002712:	7ffb      	ldrb	r3, [r7, #31]
 8002714:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d047      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d030      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800272c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002730:	d82a      	bhi.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002736:	d02a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800273c:	d824      	bhi.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800273e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002742:	d008      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d81e      	bhi.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800274e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002752:	d010      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002754:	e018      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002756:	4b68      	ldr	r3, [pc, #416]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4a67      	ldr	r2, [pc, #412]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002762:	e015      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3304      	adds	r3, #4
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fb08 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002774:	e00c      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3320      	adds	r3, #32
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fbe5 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002786:	e003      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
        break;
 800278c:	e000      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002790:	7ffb      	ldrb	r3, [r7, #31]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002796:	4b58      	ldr	r3, [pc, #352]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800279c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4954      	ldr	r1, [pc, #336]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80027ac:	e001      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ae:	7ffb      	ldrb	r3, [r7, #31]
 80027b0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80ab 	beq.w	8002916 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c4:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b49      	ldr	r3, [pc, #292]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a48      	ldr	r2, [pc, #288]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
 80027dc:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a42      	ldr	r2, [pc, #264]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f8:	f7fe f8ca 	bl	8000990 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fe:	e00f      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fe f8c6 	bl	8000990 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280e:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800281e:	e006      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0e9      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800282e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8002830:	7ffb      	ldrb	r3, [r7, #31]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d164      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002840:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	429a      	cmp	r2, r3
 8002852:	d019      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a24      	ldr	r2, [pc, #144]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01f      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe f87d 	bl	8000990 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	e012      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe f879 	bl	8000990 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d909      	bls.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80028be:	e007      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0e5      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x222>
 80028ce:	e000      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80028d0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028f0:	e008      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	77bb      	strb	r3, [r7, #30]
 80028f6:	e005      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002900:	7ffb      	ldrb	r3, [r7, #31]
 8002902:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290a:	4b9c      	ldr	r3, [pc, #624]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	4a9b      	ldr	r2, [pc, #620]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002914:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002922:	4b96      	ldr	r3, [pc, #600]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f023 0203 	bic.w	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	4992      	ldr	r1, [pc, #584]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002944:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f023 020c 	bic.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	498a      	ldr	r1, [pc, #552]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002966:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	4981      	ldr	r1, [pc, #516]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002988:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4979      	ldr	r1, [pc, #484]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029aa:	4b74      	ldr	r3, [pc, #464]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	4970      	ldr	r1, [pc, #448]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029cc:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	4968      	ldr	r1, [pc, #416]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	495f      	ldr	r1, [pc, #380]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a10:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1e:	4957      	ldr	r1, [pc, #348]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a32:	4b52      	ldr	r3, [pc, #328]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a40:	494e      	ldr	r1, [pc, #312]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d031      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a5c:	d00e      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a62:	d814      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d10f      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a78:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002a7a:	e00c      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f97c 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	77fb      	strb	r3, [r7, #31]
        break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8002a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a9c:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aaa:	4934      	ldr	r1, [pc, #208]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7ffb      	ldrb	r3, [r7, #31]
 8002ab6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	492a      	ldr	r1, [pc, #168]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae6:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af4:	4921      	ldr	r1, [pc, #132]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	4919      	ldr	r1, [pc, #100]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b30:	f023 0203 	bic.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	4910      	ldr	r1, [pc, #64]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a02      	ldr	r2, [pc, #8]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
 8002b78:	e014      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f8f5 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8002ba0:	7ffb      	ldrb	r3, [r7, #31]
 8002ba2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d04a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb8:	d108      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc0:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002bca:	e012      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bda:	4968      	ldr	r1, [pc, #416]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002be2:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002be8:	4a64      	ldr	r2, [pc, #400]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f8bc 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d019      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
 8002c14:	77bb      	strb	r3, [r7, #30]
 8002c16:	e016      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c20:	d106      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4a55      	ldr	r2, [pc, #340]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2c:	60d3      	str	r3, [r2, #12]
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c38:	d105      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a4f      	ldr	r2, [pc, #316]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c60:	4946      	ldr	r1, [pc, #280]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c70:	d106      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c72:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7c:	60d3      	str	r3, [r2, #12]
 8002c7e:	e011      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f875 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01e      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc0:	492e      	ldr	r1, [pc, #184]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f850 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002ce4:	7ffb      	ldrb	r3, [r7, #31]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002cea:	7ffb      	ldrb	r3, [r7, #31]
 8002cec:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d00:	f023 0204 	bic.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0a:	491c      	ldr	r1, [pc, #112]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d24:	f023 0218 	bic.w	r2, r3, #24
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	4913      	ldr	r1, [pc, #76]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d017      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d64:	d105      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d70:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002d72:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000

08002d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d018      	beq.n	8002dc8 <RCCEx_PLLSAI1_Config+0x48>
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d81f      	bhi.n	8002dda <RCCEx_PLLSAI1_Config+0x5a>
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d002      	beq.n	8002da4 <RCCEx_PLLSAI1_Config+0x24>
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d009      	beq.n	8002db6 <RCCEx_PLLSAI1_Config+0x36>
 8002da2:	e01a      	b.n	8002dda <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002da4:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d117      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db4:	e014      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db6:	4b61      	ldr	r3, [pc, #388]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d110      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e00d      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002dc8:	4b5c      	ldr	r3, [pc, #368]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e006      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dde:	e004      	b.n	8002dea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002de0:	bf00      	nop
 8002de2:	e002      	b.n	8002dea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002de8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 809f 	bne.w	8002f30 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002df2:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a51      	ldr	r2, [pc, #324]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfe:	f7fd fdc7 	bl	8000990 <HAL_GetTick>
 8002e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e04:	e00f      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e06:	f7fd fdc3 	bl	8000990 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d908      	bls.n	8002e26 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d009      	beq.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e24:	e006      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e26:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e9      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0x86>
 8002e32:	e000      	b.n	8002e36 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8002e34:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d179      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e42:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <RCCEx_PLLSAI1_Config+0x1c0>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	0211      	lsls	r1, r2, #8
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68d2      	ldr	r2, [r2, #12]
 8002e54:	06d2      	lsls	r2, r2, #27
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	3a01      	subs	r2, #1
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	4311      	orrs	r1, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	4934      	ldr	r1, [pc, #208]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	610b      	str	r3, [r1, #16]
 8002e6e:	e033      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d118      	bne.n	8002ea8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <RCCEx_PLLSAI1_Config+0x1c4>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6892      	ldr	r2, [r2, #8]
 8002e82:	0211      	lsls	r1, r2, #8
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6912      	ldr	r2, [r2, #16]
 8002e88:	0852      	lsrs	r2, r2, #1
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	0552      	lsls	r2, r2, #21
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6852      	ldr	r2, [r2, #4]
 8002e94:	3a01      	subs	r2, #1
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	4311      	orrs	r1, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	4926      	ldr	r1, [pc, #152]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	610b      	str	r3, [r1, #16]
 8002ea6:	e017      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1c8>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6892      	ldr	r2, [r2, #8]
 8002eb4:	0211      	lsls	r1, r2, #8
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6952      	ldr	r2, [r2, #20]
 8002eba:	0852      	lsrs	r2, r2, #1
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0652      	lsls	r2, r2, #25
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6852      	ldr	r2, [r2, #4]
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	4311      	orrs	r1, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	491a      	ldr	r1, [pc, #104]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ede:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fd54 	bl	8000990 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eea:	e00f      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eec:	f7fd fd50 	bl	8000990 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d908      	bls.n	8002f0c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002f0a:	e006      	b.n	8002f1a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0e9      	beq.n	8002eec <RCCEx_PLLSAI1_Config+0x16c>
 8002f18:	e000      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8002f1a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	07ff800c 	.word	0x07ff800c
 8002f44:	ff9f800c 	.word	0xff9f800c
 8002f48:	f9ff800c 	.word	0xf9ff800c

08002f4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d018      	beq.n	8002f94 <RCCEx_PLLSAI2_Config+0x48>
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d81f      	bhi.n	8002fa6 <RCCEx_PLLSAI2_Config+0x5a>
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d002      	beq.n	8002f70 <RCCEx_PLLSAI2_Config+0x24>
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d009      	beq.n	8002f82 <RCCEx_PLLSAI2_Config+0x36>
 8002f6e:	e01a      	b.n	8002fa6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f70:	4b4a      	ldr	r3, [pc, #296]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d117      	bne.n	8002fac <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e014      	b.n	8002fac <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f82:	4b46      	ldr	r3, [pc, #280]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d110      	bne.n	8002fb0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f92:	e00d      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002f94:	4b41      	ldr	r3, [pc, #260]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa4:	e006      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8002faa:	e004      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002fac:	bf00      	nop
 8002fae:	e002      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002fb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d169      	bne.n	8003090 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fbc:	4b37      	ldr	r3, [pc, #220]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a36      	ldr	r2, [pc, #216]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fd fce2 	bl	8000990 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fce:	e00f      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fd0:	f7fd fcde 	bl	8000990 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d908      	bls.n	8002ff0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fee:	e006      	b.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e9      	bne.n	8002fd0 <RCCEx_PLLSAI2_Config+0x84>
 8002ffc:	e000      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8002ffe:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d144      	bne.n	8003090 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <RCCEx_PLLSAI2_Config+0x154>)
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6892      	ldr	r2, [r2, #8]
 8003018:	0211      	lsls	r1, r2, #8
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68d2      	ldr	r2, [r2, #12]
 800301e:	06d2      	lsls	r2, r2, #27
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6852      	ldr	r2, [r2, #4]
 8003026:	3a01      	subs	r2, #1
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	491a      	ldr	r1, [pc, #104]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8003034:	4313      	orrs	r3, r2
 8003036:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a17      	ldr	r2, [pc, #92]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fd fca4 	bl	8000990 <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800304a:	e00f      	b.n	800306c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800304c:	f7fd fca0 	bl	8000990 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d908      	bls.n	800306c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800306a:	e006      	b.n	800307a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0e9      	beq.n	800304c <RCCEx_PLLSAI2_Config+0x100>
 8003078:	e000      	b.n	800307c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800307a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	4904      	ldr	r1, [pc, #16]	; (800309c <RCCEx_PLLSAI2_Config+0x150>)
 800308c:	4313      	orrs	r3, r2
 800308e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	07ff800c 	.word	0x07ff800c

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	4d0d      	ldr	r5, [pc, #52]	; (80030dc <__libc_init_array+0x38>)
 80030a8:	2600      	movs	r6, #0
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	4d0b      	ldr	r5, [pc, #44]	; (80030e4 <__libc_init_array+0x40>)
 80030b6:	2600      	movs	r6, #0
 80030b8:	4c0b      	ldr	r4, [pc, #44]	; (80030e8 <__libc_init_array+0x44>)
 80030ba:	f000 f81f 	bl	80030fc <_init>
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030cc:	3601      	adds	r6, #1
 80030ce:	4798      	blx	r3
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d6:	3601      	adds	r6, #1
 80030d8:	4798      	blx	r3
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	08003164 	.word	0x08003164
 80030e0:	08003164 	.word	0x08003164
 80030e4:	08003164 	.word	0x08003164
 80030e8:	08003168 	.word	0x08003168

080030ec <memset>:
 80030ec:	4402      	add	r2, r0
 80030ee:	4603      	mov	r3, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
