
DataCollection_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b2c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001d20  08001d20  00011d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d70  08001d70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d70  08001d70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d70  08001d70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d84  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005903  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011b0  00000000  00000000  00025945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00026af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  00027118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f0e  00000000  00000000  000276a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000607c  00000000  00000000  0004e5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f854f  00000000  00000000  0005462a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014cb79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f4  00000000  00000000  0014cbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08001d08 	.word	0x08001d08

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08001d08 	.word	0x08001d08

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 f9d5 	bl	80005e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f812 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f856 	bl	80002f0 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <main+0x2c>)
 800024a:	f000 fce3 	bl	8000c14 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f000 fa40 	bl	80006d4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4801      	ldr	r0, [pc, #4]	; (8000260 <main+0x2c>)
 800025a:	f000 fcdb 	bl	8000c14 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800025e:	e7f1      	b.n	8000244 <main+0x10>
 8000260:	42020800 	.word	0x42020800

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b098      	sub	sp, #96	; 0x60
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2248      	movs	r2, #72	; 0x48
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fd40 	bl	8001cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000286:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800028a:	f000 fceb 	bl	8000c64 <HAL_PWREx_ControlVoltageScaling>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000294:	f000 f86c 	bl	8000370 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000298:	2310      	movs	r3, #16
 800029a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002a0:	2300      	movs	r3, #0
 80002a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a4:	2360      	movs	r3, #96	; 0x60
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fd67 	bl	8000d84 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002bc:	f000 f858 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fa35 	bl	8001748 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002e4:	f000 f844 	bl	8000370 <Error_Handler>
  }
}
 80002e8:	bf00      	nop
 80002ea:	3760      	adds	r7, #96	; 0x60
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b088      	sub	sp, #32
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 030c 	add.w	r3, r7, #12
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_GPIO_Init+0x78>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	4a17      	ldr	r2, [pc, #92]	; (8000368 <MX_GPIO_Init+0x78>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_GPIO_Init+0x78>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_GPIO_Init+0x78>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <MX_GPIO_Init+0x78>)
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_GPIO_Init+0x78>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0304 	and.w	r3, r3, #4
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800033c:	480b      	ldr	r0, [pc, #44]	; (800036c <MX_GPIO_Init+0x7c>)
 800033e:	f000 fc51 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000342:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2300      	movs	r3, #0
 8000352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000354:	f107 030c 	add.w	r3, r7, #12
 8000358:	4619      	mov	r1, r3
 800035a:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_GPIO_Init+0x7c>)
 800035c:	f000 fac2 	bl	80008e4 <HAL_GPIO_Init>

}
 8000360:	bf00      	nop
 8000362:	3720      	adds	r7, #32
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000
 800036c:	42020800 	.word	0x42020800

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x44>)
 8000384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_MspInit+0x44>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6613      	str	r3, [r2, #96]	; 0x60
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x44>)
 8000390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <HAL_MspInit+0x44>)
 800039c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <HAL_MspInit+0x44>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	6593      	str	r3, [r2, #88]	; 0x58
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HAL_MspInit+0x44>)
 80003a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003b2:	f000 fcb3 	bl	8000d1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <NMI_Handler+0x4>

080003ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ce:	e7fe      	b.n	80003ce <HardFault_Handler+0x4>

080003d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <MemManage_Handler+0x4>

080003d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003da:	e7fe      	b.n	80003da <BusFault_Handler+0x4>

080003dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <UsageFault_Handler+0x4>

080003e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000410:	f000 f940 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <SystemInit+0x20>)
 800041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000422:	4a05      	ldr	r2, [pc, #20]	; (8000438 <SystemInit+0x20>)
 8000424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b087      	sub	sp, #28
 8000440:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000442:	4b4f      	ldr	r3, [pc, #316]	; (8000580 <SystemCoreClockUpdate+0x144>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0308 	and.w	r3, r3, #8
 800044a:	2b00      	cmp	r3, #0
 800044c:	d107      	bne.n	800045e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800044e:	4b4c      	ldr	r3, [pc, #304]	; (8000580 <SystemCoreClockUpdate+0x144>)
 8000450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	f003 030f 	and.w	r3, r3, #15
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	e005      	b.n	800046a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800045e:	4b48      	ldr	r3, [pc, #288]	; (8000580 <SystemCoreClockUpdate+0x144>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	f003 030f 	and.w	r3, r3, #15
 8000468:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800046a:	4a46      	ldr	r2, [pc, #280]	; (8000584 <SystemCoreClockUpdate+0x148>)
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000474:	4b42      	ldr	r3, [pc, #264]	; (8000580 <SystemCoreClockUpdate+0x144>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f003 030c 	and.w	r3, r3, #12
 800047c:	2b0c      	cmp	r3, #12
 800047e:	d866      	bhi.n	800054e <SystemCoreClockUpdate+0x112>
 8000480:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <SystemCoreClockUpdate+0x4c>)
 8000482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000486:	bf00      	nop
 8000488:	080004bd 	.word	0x080004bd
 800048c:	0800054f 	.word	0x0800054f
 8000490:	0800054f 	.word	0x0800054f
 8000494:	0800054f 	.word	0x0800054f
 8000498:	080004c5 	.word	0x080004c5
 800049c:	0800054f 	.word	0x0800054f
 80004a0:	0800054f 	.word	0x0800054f
 80004a4:	0800054f 	.word	0x0800054f
 80004a8:	080004cd 	.word	0x080004cd
 80004ac:	0800054f 	.word	0x0800054f
 80004b0:	0800054f 	.word	0x0800054f
 80004b4:	0800054f 	.word	0x0800054f
 80004b8:	080004d5 	.word	0x080004d5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80004bc:	4a32      	ldr	r2, [pc, #200]	; (8000588 <SystemCoreClockUpdate+0x14c>)
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	6013      	str	r3, [r2, #0]
      break;
 80004c2:	e048      	b.n	8000556 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80004c4:	4b30      	ldr	r3, [pc, #192]	; (8000588 <SystemCoreClockUpdate+0x14c>)
 80004c6:	4a31      	ldr	r2, [pc, #196]	; (800058c <SystemCoreClockUpdate+0x150>)
 80004c8:	601a      	str	r2, [r3, #0]
      break;
 80004ca:	e044      	b.n	8000556 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <SystemCoreClockUpdate+0x14c>)
 80004ce:	4a2f      	ldr	r2, [pc, #188]	; (800058c <SystemCoreClockUpdate+0x150>)
 80004d0:	601a      	str	r2, [r3, #0]
      break;
 80004d2:	e040      	b.n	8000556 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80004d4:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <SystemCoreClockUpdate+0x144>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <SystemCoreClockUpdate+0x144>)
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	091b      	lsrs	r3, r3, #4
 80004e4:	f003 030f 	and.w	r3, r3, #15
 80004e8:	3301      	adds	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d003      	beq.n	80004fa <SystemCoreClockUpdate+0xbe>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d006      	beq.n	8000506 <SystemCoreClockUpdate+0xca>
 80004f8:	e00b      	b.n	8000512 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80004fa:	4a24      	ldr	r2, [pc, #144]	; (800058c <SystemCoreClockUpdate+0x150>)
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000502:	613b      	str	r3, [r7, #16]
          break;
 8000504:	e00b      	b.n	800051e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000506:	4a21      	ldr	r2, [pc, #132]	; (800058c <SystemCoreClockUpdate+0x150>)
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	fbb2 f3f3 	udiv	r3, r2, r3
 800050e:	613b      	str	r3, [r7, #16]
          break;
 8000510:	e005      	b.n	800051e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	613b      	str	r3, [r7, #16]
          break;
 800051c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <SystemCoreClockUpdate+0x144>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fb02 f303 	mul.w	r3, r2, r3
 800052e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <SystemCoreClockUpdate+0x144>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	0e5b      	lsrs	r3, r3, #25
 8000536:	f003 0303 	and.w	r3, r3, #3
 800053a:	3301      	adds	r3, #1
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000540:	693a      	ldr	r2, [r7, #16]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	fbb2 f3f3 	udiv	r3, r2, r3
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <SystemCoreClockUpdate+0x14c>)
 800054a:	6013      	str	r3, [r2, #0]
      break;
 800054c:	e003      	b.n	8000556 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <SystemCoreClockUpdate+0x14c>)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	6013      	str	r3, [r2, #0]
      break;
 8000554:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <SystemCoreClockUpdate+0x144>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	091b      	lsrs	r3, r3, #4
 800055c:	f003 030f 	and.w	r3, r3, #15
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <SystemCoreClockUpdate+0x154>)
 8000562:	5cd3      	ldrb	r3, [r2, r3]
 8000564:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <SystemCoreClockUpdate+0x14c>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	fa22 f303 	lsr.w	r3, r2, r3
 8000570:	4a05      	ldr	r2, [pc, #20]	; (8000588 <SystemCoreClockUpdate+0x14c>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	371c      	adds	r7, #28
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	08001d30 	.word	0x08001d30
 8000588:	20000000 	.word	0x20000000
 800058c:	00f42400 	.word	0x00f42400
 8000590:	08001d20 	.word	0x08001d20

08000594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000598:	f7ff ff3e 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800059c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800059e:	e003      	b.n	80005a8 <LoopCopyDataInit>

080005a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005a6:	3104      	adds	r1, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005b0:	d3f6      	bcc.n	80005a0 <CopyDataInit>
	ldr	r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80005b4:	e002      	b.n	80005bc <LoopFillZerobss>

080005b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005b8:	f842 3b04 	str.w	r3, [r2], #4

080005bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <LoopForever+0x16>)
	cmp	r2, r3
 80005be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005c0:	d3f9      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c2:	f001 fb75 	bl	8001cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c6:	f7ff fe35 	bl	8000234 <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80005cc:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80005d0:	08001d78 	.word	0x08001d78
	ldr	r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005d8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005dc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005e0:	2000002c 	.word	0x2000002c

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>

080005e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80005f0:	2004      	movs	r0, #4
 80005f2:	f000 f945 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80005f6:	f7ff ff21 	bl	800043c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fa:	2007      	movs	r0, #7
 80005fc:	f000 f80e 	bl	800061c <HAL_InitTick>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e001      	b.n	8000610 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800060c:	f7ff feb6 	bl	800037c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000610:	79fb      	ldrb	r3, [r7, #7]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_InitTick+0x6c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d023      	beq.n	8000678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_InitTick+0x70>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_InitTick+0x6c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f93f 	bl	80008ca <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10f      	bne.n	8000672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b07      	cmp	r3, #7
 8000656:	d809      	bhi.n	800066c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f919 	bl	8000896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <HAL_InitTick+0x74>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e007      	b.n	800067c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e004      	b.n	800067c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e001      	b.n	800067c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	20000000 	.word	0x20000000
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000028 	.word	0x20000028

080006bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000028 	.word	0x20000028

080006d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f7ff ffee 	bl	80006bc <HAL_GetTick>
 80006e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ec:	d005      	beq.n	80006fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_Delay+0x44>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fa:	bf00      	nop
 80006fc:	f7ff ffde 	bl	80006bc <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	429a      	cmp	r2, r3
 800070a:	d8f7      	bhi.n	80006fc <HAL_Delay+0x28>
  {
  }
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0152      	lsls	r2, r2, #5
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0152      	lsls	r2, r2, #5
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	bf28      	it	cs
 80007f2:	2303      	movcs	r3, #3
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3303      	adds	r3, #3
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b04      	subs	r3, #4
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	2107      	movs	r1, #7
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff47 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff5e 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff90 	bl	80007d4 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5f 	bl	8000780 <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffb2 	bl	800083c <SysTick_Config>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008f2:	e158      	b.n	8000ba6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f000 814a 	beq.w	8000ba0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d00b      	beq.n	800092c <HAL_GPIO_Init+0x48>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d007      	beq.n	800092c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000920:	2b11      	cmp	r3, #17
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b12      	cmp	r3, #18
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	f003 0201 	and.w	r2, r3, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0xea>
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d123      	bne.n	8000a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	691a      	ldr	r2, [r3, #16]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	08da      	lsrs	r2, r3, #3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3208      	adds	r2, #8
 8000a10:	6939      	ldr	r1, [r7, #16]
 8000a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0203 	and.w	r2, r3, #3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 80a4 	beq.w	8000ba0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000a58:	4a5a      	ldr	r2, [pc, #360]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3318      	adds	r3, #24
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	220f      	movs	r2, #15
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <HAL_GPIO_Init+0x2e4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d025      	beq.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d01f      	beq.n	8000acc <HAL_GPIO_Init+0x1e8>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x2ec>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d019      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e4>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x2f0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d013      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e0>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_GPIO_Init+0x2f4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d00d      	beq.n	8000ac0 <HAL_GPIO_Init+0x1dc>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x2f8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0x1d8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x2fc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d101      	bne.n	8000ab8 <HAL_GPIO_Init+0x1d4>
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	e00c      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ab8:	2307      	movs	r3, #7
 8000aba:	e00a      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000abc:	2305      	movs	r3, #5
 8000abe:	e008      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e004      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	f002 0203 	and.w	r2, r2, #3
 8000ad8:	00d2      	lsls	r2, r2, #3
 8000ada:	4093      	lsls	r3, r2
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000ae2:	4938      	ldr	r1, [pc, #224]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3318      	adds	r3, #24
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b16:	4a2b      	ldr	r2, [pc, #172]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f47f ae9f 	bne.w	80008f4 <HAL_GPIO_Init+0x10>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	4002f400 	.word	0x4002f400
 8000bc8:	42020000 	.word	0x42020000
 8000bcc:	42020400 	.word	0x42020400
 8000bd0:	42020800 	.word	0x42020800
 8000bd4:	42020c00 	.word	0x42020c00
 8000bd8:	42021000 	.word	0x42021000
 8000bdc:	42021400 	.word	0x42021400
 8000be0:	42021800 	.word	0x42021800

08000be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf4:	787b      	ldrb	r3, [r7, #1]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c00:	e002      	b.n	8000c08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	041a      	lsls	r2, r3, #16
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43d9      	mvns	r1, r3
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	400b      	ands	r3, r1
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40007000 	.word	0x40007000

08000c64 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c74:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000c76:	f000 f861 	bl	8000d3c <HAL_PWREx_SMPS_GetEffectiveMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c80:	d101      	bne.n	8000c86 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e03e      	b.n	8000d04 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c92:	d101      	bne.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e035      	b.n	8000d04 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d101      	bne.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e02f      	b.n	8000d04 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000cac:	4917      	ldr	r1, [pc, #92]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	095b      	lsrs	r3, r3, #5
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	09db      	lsrs	r3, r3, #7
 8000cc2:	2232      	movs	r2, #50	; 0x32
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd4:	e002      	b.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce8:	d102      	bne.n	8000cf0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1f2      	bne.n	8000cd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfc:	d101      	bne.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e000      	b.n	8000d04 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40007000 	.word	0x40007000
 8000d10:	20000000 	.word	0x20000000
 8000d14:	0a7c5ac5 	.word	0x0a7c5ac5
 8000d18:	cccccccd 	.word	0xcccccccd

08000d1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6093      	str	r3, [r2, #8]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40007000 	.word	0x40007000

08000d3c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	e00a      	b.n	8000d70 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d103      	bne.n	8000d6c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8000d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	e001      	b.n	8000d70 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40007000 	.word	0x40007000

08000d84 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f000 bcd0 	b.w	8001738 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d98:	4b99      	ldr	r3, [pc, #612]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000da2:	4b97      	ldr	r3, [pc, #604]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80e9 	beq.w	8000f8c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d006      	beq.n	8000dce <HAL_RCC_OscConfig+0x4a>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2b0c      	cmp	r3, #12
 8000dc4:	f040 8083 	bne.w	8000ece <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d17f      	bne.n	8000ece <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dce:	4b8c      	ldr	r3, [pc, #560]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <HAL_RCC_OscConfig+0x64>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f000 bca8 	b.w	8001738 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dec:	4b84      	ldr	r3, [pc, #528]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <HAL_RCC_OscConfig+0x7e>
 8000df8:	4b81      	ldr	r3, [pc, #516]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e00:	e005      	b.n	8000e0e <HAL_RCC_OscConfig+0x8a>
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d224      	bcs.n	8000e5c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fe6e 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f000 bc88 	b.w	8001738 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e28:	4b75      	ldr	r3, [pc, #468]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a74      	ldr	r2, [pc, #464]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b72      	ldr	r3, [pc, #456]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	496f      	ldr	r1, [pc, #444]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e46:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	496a      	ldr	r1, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
 8000e5a:	e026      	b.n	8000eaa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e5c:	4b68      	ldr	r3, [pc, #416]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a67      	ldr	r2, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b65      	ldr	r3, [pc, #404]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	4962      	ldr	r1, [pc, #392]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e7a:	4b61      	ldr	r3, [pc, #388]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	495d      	ldr	r1, [pc, #372]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10a      	bne.n	8000eaa <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fe2d 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f000 bc47 	b.w	8001738 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000eaa:	f000 fe11 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a54      	ldr	r2, [pc, #336]	; (8001004 <HAL_RCC_OscConfig+0x280>)
 8000eb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000eb4:	4b54      	ldr	r3, [pc, #336]	; (8001008 <HAL_RCC_OscConfig+0x284>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fbaf 	bl	800061c <HAL_InitTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d060      	beq.n	8000f8a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	f000 bc35 	b.w	8001738 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d039      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a49      	ldr	r2, [pc, #292]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fbeb 	bl	80006bc <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ee8:	e00f      	b.n	8000f0a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eea:	f7ff fbe7 	bl	80006bc <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d908      	bls.n	8000f0a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ef8:	4b41      	ldr	r3, [pc, #260]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	f000 bc17 	b.w	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0e9      	beq.n	8000eea <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f16:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a39      	ldr	r2, [pc, #228]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	4934      	ldr	r1, [pc, #208]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f34:	4b32      	ldr	r3, [pc, #200]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	492f      	ldr	r1, [pc, #188]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	e020      	b.n	8000f8c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fbb1 	bl	80006bc <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f5c:	e00e      	b.n	8000f7c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fbad 	bl	80006bc <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d907      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e3dd      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1ea      	bne.n	8000f5e <HAL_RCC_OscConfig+0x1da>
 8000f88:	e000      	b.n	8000f8c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d07e      	beq.n	8001096 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x226>
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2b0c      	cmp	r3, #12
 8000fa2:	d10e      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d06e      	beq.n	8001094 <HAL_RCC_OscConfig+0x310>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d16a      	bne.n	8001094 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e3ba      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x256>
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e024      	b.n	8001024 <HAL_RCC_OscConfig+0x2a0>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe2:	d113      	bne.n	800100c <HAL_RCC_OscConfig+0x288>
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a05      	ldr	r2, [pc, #20]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a02      	ldr	r2, [pc, #8]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e012      	b.n	8001024 <HAL_RCC_OscConfig+0x2a0>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	20000000 	.word	0x20000000
 8001008:	20000004 	.word	0x20000004
 800100c:	4b8b      	ldr	r3, [pc, #556]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a8a      	ldr	r2, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b88      	ldr	r3, [pc, #544]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d019      	beq.n	8001060 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fb46 	bl	80006bc <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001032:	e00e      	b.n	8001052 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fb42 	bl	80006bc <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d907      	bls.n	8001052 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001042:	4b7e      	ldr	r3, [pc, #504]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e372      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001052:	4b7a      	ldr	r3, [pc, #488]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0ea      	beq.n	8001034 <HAL_RCC_OscConfig+0x2b0>
 800105e:	e01a      	b.n	8001096 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fb2c 	bl	80006bc <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001066:	e00e      	b.n	8001086 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fb28 	bl	80006bc <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d907      	bls.n	8001086 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001076:	4b71      	ldr	r3, [pc, #452]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e358      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001086:	4b6d      	ldr	r3, [pc, #436]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1ea      	bne.n	8001068 <HAL_RCC_OscConfig+0x2e4>
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d06c      	beq.n	800117c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x330>
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d119      	bne.n	80010e2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d116      	bne.n	80010e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b4:	4b61      	ldr	r3, [pc, #388]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_OscConfig+0x348>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e335      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b5b      	ldr	r3, [pc, #364]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	4958      	ldr	r1, [pc, #352]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010e0:	e04c      	b.n	800117c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d029      	beq.n	800113e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ea:	4b54      	ldr	r3, [pc, #336]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a53      	ldr	r2, [pc, #332]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fae1 	bl	80006bc <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010fc:	e00e      	b.n	800111c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fe:	f7ff fadd 	bl	80006bc <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d907      	bls.n	800111c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e30d      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0ea      	beq.n	80010fe <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	4b44      	ldr	r3, [pc, #272]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	061b      	lsls	r3, r3, #24
 8001136:	4941      	ldr	r1, [pc, #260]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
 800113c:	e01e      	b.n	800117c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a3e      	ldr	r2, [pc, #248]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114a:	f7ff fab7 	bl	80006bc <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001150:	e00e      	b.n	8001170 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fab3 	bl	80006bc <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d907      	bls.n	8001170 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001160:	4b36      	ldr	r3, [pc, #216]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e2e3      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1ea      	bne.n	8001152 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d062      	beq.n	800124e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d038      	beq.n	8001202 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d108      	bne.n	80011aa <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800119a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119e:	4a27      	ldr	r2, [pc, #156]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011a0:	f023 0310 	bic.w	r3, r3, #16
 80011a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80011a8:	e007      	b.n	80011ba <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b0:	4a22      	ldr	r2, [pc, #136]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ca:	f7ff fa77 	bl	80006bc <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d0:	e00f      	b.n	80011f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fa73 	bl	80006bc <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b07      	cmp	r3, #7
 80011de:	d908      	bls.n	80011f2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e2a2      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0e8      	beq.n	80011d2 <HAL_RCC_OscConfig+0x44e>
 8001200:	e025      	b.n	800124e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff fa53 	bl	80006bc <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001218:	e012      	b.n	8001240 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fa4f 	bl	80006bc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b07      	cmp	r3, #7
 8001226:	d90b      	bls.n	8001240 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800122a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e27e      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001240:	4ba8      	ldr	r3, [pc, #672]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1e5      	bne.n	800121a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 812d 	beq.w	80014b6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001260:	4ba0      	ldr	r3, [pc, #640]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10d      	bne.n	8001288 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	4b9d      	ldr	r3, [pc, #628]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	4a9c      	ldr	r2, [pc, #624]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001276:	6593      	str	r3, [r2, #88]	; 0x58
 8001278:	4b9a      	ldr	r3, [pc, #616]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001284:	2301      	movs	r3, #1
 8001286:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001288:	4b97      	ldr	r3, [pc, #604]	; (80014e8 <HAL_RCC_OscConfig+0x764>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11e      	bne.n	80012d2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001294:	4b94      	ldr	r3, [pc, #592]	; (80014e8 <HAL_RCC_OscConfig+0x764>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a93      	ldr	r2, [pc, #588]	; (80014e8 <HAL_RCC_OscConfig+0x764>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fa0c 	bl	80006bc <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a6:	e00e      	b.n	80012c6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a8:	f7ff fa08 	bl	80006bc <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d907      	bls.n	80012c6 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b6:	4b8c      	ldr	r3, [pc, #560]	; (80014e8 <HAL_RCC_OscConfig+0x764>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e238      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c6:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_RCC_OscConfig+0x764>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0ea      	beq.n	80012a8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d01f      	beq.n	800131e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d010      	beq.n	800130c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012ea:	4b7e      	ldr	r3, [pc, #504]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80012ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f0:	4a7c      	ldr	r2, [pc, #496]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012fa:	4b7a      	ldr	r3, [pc, #488]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80012fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001300:	4a78      	ldr	r2, [pc, #480]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800130a:	e018      	b.n	800133e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800130c:	4b75      	ldr	r3, [pc, #468]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	4a74      	ldr	r2, [pc, #464]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800131c:	e00f      	b.n	800133e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800131e:	4b71      	ldr	r3, [pc, #452]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001324:	4a6f      	ldr	r2, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800132e:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001334:	4a6b      	ldr	r2, [pc, #428]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001336:	f023 0304 	bic.w	r3, r3, #4
 800133a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d068      	beq.n	8001418 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff f9b9 	bl	80006bc <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800134c:	e011      	b.n	8001372 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff f9b5 	bl	80006bc <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	; 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d908      	bls.n	8001372 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001360:	4b60      	ldr	r3, [pc, #384]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e1e2      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001372:	4b5c      	ldr	r3, [pc, #368]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0e6      	beq.n	800134e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001388:	2b00      	cmp	r3, #0
 800138a:	d022      	beq.n	80013d2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800138c:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 800138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001392:	4a54      	ldr	r2, [pc, #336]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800139c:	e011      	b.n	80013c2 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff f98d 	bl	80006bc <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d908      	bls.n	80013c2 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1ba      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013c2:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80013c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0e6      	beq.n	800139e <HAL_RCC_OscConfig+0x61a>
 80013d0:	e068      	b.n	80014a4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80013d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d8:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80013da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80013e2:	e011      	b.n	8001408 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff f96a 	bl	80006bc <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d908      	bls.n	8001408 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e197      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 800140a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1e6      	bne.n	80013e4 <HAL_RCC_OscConfig+0x660>
 8001416:	e045      	b.n	80014a4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff f950 	bl	80006bc <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800141e:	e011      	b.n	8001444 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff f94c 	bl	80006bc <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d908      	bls.n	8001444 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e179      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e6      	bne.n	8001420 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145c:	2b00      	cmp	r3, #0
 800145e:	d021      	beq.n	80014a4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001470:	e011      	b.n	8001496 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff f923 	bl	80006bc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d908      	bls.n	8001496 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e150      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e6      	bne.n	8001472 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80014b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d04f      	beq.n	8001562 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d028      	beq.n	800151c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80014cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_RCC_OscConfig+0x760>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014da:	f7ff f8ef 	bl	80006bc <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014e0:	e014      	b.n	800150c <HAL_RCC_OscConfig+0x788>
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ec:	f7ff f8e6 	bl	80006bc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d908      	bls.n	800150c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014fa:	4b91      	ldr	r3, [pc, #580]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 80014fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e115      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800150c:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800150e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0e8      	beq.n	80014ec <HAL_RCC_OscConfig+0x768>
 800151a:	e022      	b.n	8001562 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800151c:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800151e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001522:	4a87      	ldr	r2, [pc, #540]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff f8c6 	bl	80006bc <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001532:	e00f      	b.n	8001554 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001534:	f7ff f8c2 	bl	80006bc <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d908      	bls.n	8001554 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001542:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0f1      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001554:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e8      	bne.n	8001534 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80e5 	beq.w	8001736 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156c:	4b74      	ldr	r3, [pc, #464]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b0c      	cmp	r3, #12
 8001576:	f000 809f 	beq.w	80016b8 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	2b02      	cmp	r3, #2
 8001580:	d166      	bne.n	8001650 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6e      	ldr	r2, [pc, #440]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff f895 	bl	80006bc <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	e00e      	b.n	80015b4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f891 	bl	80006bc <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d907      	bls.n	80015b4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a4:	4b66      	ldr	r3, [pc, #408]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e0c1      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1ea      	bne.n	8001596 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c0:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x9c0>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015d0:	3a01      	subs	r2, #1
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015da:	0212      	lsls	r2, r2, #8
 80015dc:	4311      	orrs	r1, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015e2:	0852      	lsrs	r2, r2, #1
 80015e4:	3a01      	subs	r2, #1
 80015e6:	0552      	lsls	r2, r2, #21
 80015e8:	4311      	orrs	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015ee:	0852      	lsrs	r2, r2, #1
 80015f0:	3a01      	subs	r2, #1
 80015f2:	0652      	lsls	r2, r2, #25
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015fa:	06d2      	lsls	r2, r2, #27
 80015fc:	430a      	orrs	r2, r1
 80015fe:	4950      	ldr	r1, [pc, #320]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b4e      	ldr	r3, [pc, #312]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001610:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff f84e 	bl	80006bc <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001622:	e00e      	b.n	8001642 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f84a 	bl	80006bc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d907      	bls.n	8001642 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e07a      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ea      	beq.n	8001624 <HAL_RCC_OscConfig+0x8a0>
 800164e:	e072      	b.n	8001736 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800165a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a34      	ldr	r2, [pc, #208]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a31      	ldr	r2, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800167a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff f81a 	bl	80006bc <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168a:	e00e      	b.n	80016aa <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff f816 	bl	80006bc <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d907      	bls.n	80016aa <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e046      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ea      	bne.n	800168c <HAL_RCC_OscConfig+0x908>
 80016b6:	e03e      	b.n	8001736 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e039      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_RCC_OscConfig+0x9bc>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d12c      	bne.n	8001732 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	3b01      	subs	r3, #1
 80016e4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d123      	bne.n	8001732 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11b      	bne.n	8001732 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d113      	bne.n	8001732 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	3b01      	subs	r3, #1
 8001718:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d109      	bne.n	8001732 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	019f800c 	.word	0x019f800c

08001748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e10d      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d910      	bls.n	8001790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 020f 	bic.w	r2, r3, #15
 8001776:	4983      	ldr	r1, [pc, #524]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b81      	ldr	r3, [pc, #516]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0f5      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8094 	beq.w	80018c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d134      	bne.n	8001810 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0e2      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017b6:	f000 fa03 	bl	8001bc0 <RCC_GetSysClockFreqFromPLLSource>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4a73      	ldr	r2, [pc, #460]	; (800198c <HAL_RCC_ClockConfig+0x244>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d956      	bls.n	8001872 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80017c4:	4b70      	ldr	r3, [pc, #448]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017d0:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017d8:	4a6b      	ldr	r2, [pc, #428]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80017da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e045      	b.n	8001872 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03f      	beq.n	8001872 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d13b      	bne.n	8001872 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001802:	4a61      	ldr	r2, [pc, #388]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e030      	b.n	8001872 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d107      	bne.n	8001828 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001818:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d115      	bne.n	8001850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0a9      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e09d      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	4b51      	ldr	r3, [pc, #324]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e095      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001850:	f000 f8a2 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_RCC_ClockConfig+0x244>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d909      	bls.n	8001872 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800185e:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001866:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b45      	ldr	r3, [pc, #276]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4942      	ldr	r1, [pc, #264]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001884:	f7fe ff1a 	bl	80006bc <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e013      	b.n	80018b4 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7fe ff16 	bl	80006bc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d90a      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e063      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 020c 	and.w	r2, r3, #12
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d1e2      	bne.n	800188c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d2:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	492a      	ldr	r1, [pc, #168]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b80      	cmp	r3, #128	; 0x80
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018ec:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a25      	ldr	r2, [pc, #148]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 80018f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f6:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d210      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 020f 	bic.w	r2, r3, #15
 800190e:	491d      	ldr	r1, [pc, #116]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_ClockConfig+0x23c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e029      	b.n	800197c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4911      	ldr	r1, [pc, #68]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4909      	ldr	r1, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x240>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001966:	f000 f8b3 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 800196a:	4603      	mov	r3, r0
 800196c:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_RCC_ClockConfig+0x248>)
 800196e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_RCC_ClockConfig+0x24c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fe51 	bl	800061c <HAL_InitTick>
 800197a:	4603      	mov	r3, r0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40022000 	.word	0x40022000
 8001988:	40021000 	.word	0x40021000
 800198c:	04c4b400 	.word	0x04c4b400
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b0:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x34>
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d121      	bne.n	8001a0a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d11e      	bne.n	8001a0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019cc:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e005      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x130>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_RCC_GetSysClockFreq+0x134>)
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	e004      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_GetSysClockFreq+0x134>)
 8001a1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d146      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d003      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0xb4>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d00d      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0xce>
 8001a4a:	e019      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_RCC_GetSysClockFreq+0x134>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a56:	68d2      	ldr	r2, [r2, #12]
 8001a58:	0a12      	lsrs	r2, r2, #8
 8001a5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
        break;
 8001a64:	e019      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_RCC_GetSysClockFreq+0x134>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a70:	68d2      	ldr	r2, [r2, #12]
 8001a72:	0a12      	lsrs	r2, r2, #8
 8001a74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
        break;
 8001a7e:	e00c      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a8a:	68d2      	ldr	r2, [r2, #12]
 8001a8c:	0a12      	lsrs	r2, r2, #8
 8001a8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
        break;
 8001a98:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	0e5b      	lsrs	r3, r3, #25
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	08001d30 	.word	0x08001d30
 8001acc:	00f42400 	.word	0x00f42400

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001ad4:	f7ff ff60 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetHCLKFreq+0x20>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08001d20 	.word	0x08001d20

08001af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b10:	f7ff f89a 	bl	8000c48 <HAL_PWREx_GetVoltageRange>
 8001b14:	6138      	str	r0, [r7, #16]
 8001b16:	e014      	b.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6593      	str	r3, [r2, #88]	; 0x58
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b30:	f7ff f88a 	bl	8000c48 <HAL_PWREx_GetVoltageRange>
 8001b34:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4e:	d10b      	bne.n	8001b68 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b80      	cmp	r3, #128	; 0x80
 8001b54:	d919      	bls.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2ba0      	cmp	r3, #160	; 0xa0
 8001b5a:	d902      	bls.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001b60:	e013      	b.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b62:	2301      	movs	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001b66:	e010      	b.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b80      	cmp	r3, #128	; 0x80
 8001b6c:	d902      	bls.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b6e:	2303      	movs	r3, #3
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e00a      	b.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b80      	cmp	r3, #128	; 0x80
 8001b78:	d102      	bne.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e004      	b.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b70      	cmp	r3, #112	; 0x70
 8001b84:	d101      	bne.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 020f 	bic.w	r2, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	; (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d118      	bne.n	8001c08 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e005      	b.n	8001bfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001bfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d00d      	beq.n	8001c48 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8001c2c:	e019      	b.n	8001c62 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001c38:	68d2      	ldr	r2, [r2, #12]
 8001c3a:	0a12      	lsrs	r2, r2, #8
 8001c3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	613b      	str	r3, [r7, #16]
      break;
 8001c46:	e019      	b.n	8001c7c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001c52:	68d2      	ldr	r2, [r2, #12]
 8001c54:	0a12      	lsrs	r2, r2, #8
 8001c56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	613b      	str	r3, [r7, #16]
      break;
 8001c60:	e00c      	b.n	8001c7c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001c6c:	68d2      	ldr	r2, [r2, #12]
 8001c6e:	0a12      	lsrs	r2, r2, #8
 8001c70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	613b      	str	r3, [r7, #16]
      break;
 8001c7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0e5b      	lsrs	r3, r3, #25
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001c96:	683b      	ldr	r3, [r7, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08001d30 	.word	0x08001d30
 8001cac:	00f42400 	.word	0x00f42400

08001cb0 <__libc_init_array>:
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	4d0d      	ldr	r5, [pc, #52]	; (8001ce8 <__libc_init_array+0x38>)
 8001cb4:	2600      	movs	r6, #0
 8001cb6:	4c0d      	ldr	r4, [pc, #52]	; (8001cec <__libc_init_array+0x3c>)
 8001cb8:	1b64      	subs	r4, r4, r5
 8001cba:	10a4      	asrs	r4, r4, #2
 8001cbc:	42a6      	cmp	r6, r4
 8001cbe:	d109      	bne.n	8001cd4 <__libc_init_array+0x24>
 8001cc0:	4d0b      	ldr	r5, [pc, #44]	; (8001cf0 <__libc_init_array+0x40>)
 8001cc2:	2600      	movs	r6, #0
 8001cc4:	4c0b      	ldr	r4, [pc, #44]	; (8001cf4 <__libc_init_array+0x44>)
 8001cc6:	f000 f81f 	bl	8001d08 <_init>
 8001cca:	1b64      	subs	r4, r4, r5
 8001ccc:	10a4      	asrs	r4, r4, #2
 8001cce:	42a6      	cmp	r6, r4
 8001cd0:	d105      	bne.n	8001cde <__libc_init_array+0x2e>
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}
 8001cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd8:	3601      	adds	r6, #1
 8001cda:	4798      	blx	r3
 8001cdc:	e7ee      	b.n	8001cbc <__libc_init_array+0xc>
 8001cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce2:	3601      	adds	r6, #1
 8001ce4:	4798      	blx	r3
 8001ce6:	e7f2      	b.n	8001cce <__libc_init_array+0x1e>
 8001ce8:	08001d70 	.word	0x08001d70
 8001cec:	08001d70 	.word	0x08001d70
 8001cf0:	08001d70 	.word	0x08001d70
 8001cf4:	08001d74 	.word	0x08001d74

08001cf8 <memset>:
 8001cf8:	4402      	add	r2, r0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d100      	bne.n	8001d02 <memset+0xa>
 8001d00:	4770      	bx	lr
 8001d02:	f803 1b01 	strb.w	r1, [r3], #1
 8001d06:	e7f9      	b.n	8001cfc <memset+0x4>

08001d08 <_init>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	bf00      	nop
 8001d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0e:	bc08      	pop	{r3}
 8001d10:	469e      	mov	lr, r3
 8001d12:	4770      	bx	lr

08001d14 <_fini>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	bf00      	nop
 8001d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	469e      	mov	lr, r3
 8001d1e:	4770      	bx	lr
